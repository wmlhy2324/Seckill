// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: cart_rpc.proto

package cart_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cart_CreateCart_FullMethodName        = "/cart_rpc.Cart/CreateCart"
	Cart_AddItem_FullMethodName           = "/cart_rpc.Cart/AddItem"
	Cart_GetCartDetail_FullMethodName     = "/cart_rpc.Cart/GetCartDetail"
	Cart_ReduceInventory_FullMethodName   = "/cart_rpc.Cart/ReduceInventory"
	Cart_IncreaseInventory_FullMethodName = "/cart_rpc.Cart/IncreaseInventory"
)

// CartClient is the client API for Cart service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartClient interface {
	CreateCart(ctx context.Context, in *CreateCartRequest, opts ...grpc.CallOption) (*CartResponse, error)
	AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*AddItemResponse, error)
	GetCartDetail(ctx context.Context, in *GetCartDetailRequest, opts ...grpc.CallOption) (*GetCartDetailResponse, error)
	ReduceInventory(ctx context.Context, in *ReduceInventoryRequest, opts ...grpc.CallOption) (*ReduceInventoryResponse, error)
	IncreaseInventory(ctx context.Context, in *IncreaseInventoryRequest, opts ...grpc.CallOption) (*IncreaseInventoryResponse, error)
}

type cartClient struct {
	cc grpc.ClientConnInterface
}

func NewCartClient(cc grpc.ClientConnInterface) CartClient {
	return &cartClient{cc}
}

func (c *cartClient) CreateCart(ctx context.Context, in *CreateCartRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, Cart_CreateCart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*AddItemResponse, error) {
	out := new(AddItemResponse)
	err := c.cc.Invoke(ctx, Cart_AddItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) GetCartDetail(ctx context.Context, in *GetCartDetailRequest, opts ...grpc.CallOption) (*GetCartDetailResponse, error) {
	out := new(GetCartDetailResponse)
	err := c.cc.Invoke(ctx, Cart_GetCartDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) ReduceInventory(ctx context.Context, in *ReduceInventoryRequest, opts ...grpc.CallOption) (*ReduceInventoryResponse, error) {
	out := new(ReduceInventoryResponse)
	err := c.cc.Invoke(ctx, Cart_ReduceInventory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) IncreaseInventory(ctx context.Context, in *IncreaseInventoryRequest, opts ...grpc.CallOption) (*IncreaseInventoryResponse, error) {
	out := new(IncreaseInventoryResponse)
	err := c.cc.Invoke(ctx, Cart_IncreaseInventory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServer is the server API for Cart service.
// All implementations must embed UnimplementedCartServer
// for forward compatibility
type CartServer interface {
	CreateCart(context.Context, *CreateCartRequest) (*CartResponse, error)
	AddItem(context.Context, *AddItemRequest) (*AddItemResponse, error)
	GetCartDetail(context.Context, *GetCartDetailRequest) (*GetCartDetailResponse, error)
	ReduceInventory(context.Context, *ReduceInventoryRequest) (*ReduceInventoryResponse, error)
	IncreaseInventory(context.Context, *IncreaseInventoryRequest) (*IncreaseInventoryResponse, error)
	mustEmbedUnimplementedCartServer()
}

// UnimplementedCartServer must be embedded to have forward compatible implementations.
type UnimplementedCartServer struct {
}

func (UnimplementedCartServer) CreateCart(context.Context, *CreateCartRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCart not implemented")
}
func (UnimplementedCartServer) AddItem(context.Context, *AddItemRequest) (*AddItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedCartServer) GetCartDetail(context.Context, *GetCartDetailRequest) (*GetCartDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartDetail not implemented")
}
func (UnimplementedCartServer) ReduceInventory(context.Context, *ReduceInventoryRequest) (*ReduceInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceInventory not implemented")
}
func (UnimplementedCartServer) IncreaseInventory(context.Context, *IncreaseInventoryRequest) (*IncreaseInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseInventory not implemented")
}
func (UnimplementedCartServer) mustEmbedUnimplementedCartServer() {}

// UnsafeCartServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServer will
// result in compilation errors.
type UnsafeCartServer interface {
	mustEmbedUnimplementedCartServer()
}

func RegisterCartServer(s grpc.ServiceRegistrar, srv CartServer) {
	s.RegisterService(&Cart_ServiceDesc, srv)
}

func _Cart_CreateCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).CreateCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_CreateCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).CreateCart(ctx, req.(*CreateCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_AddItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).AddItem(ctx, req.(*AddItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_GetCartDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).GetCartDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_GetCartDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).GetCartDetail(ctx, req.(*GetCartDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_ReduceInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).ReduceInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_ReduceInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).ReduceInventory(ctx, req.(*ReduceInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_IncreaseInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).IncreaseInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_IncreaseInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).IncreaseInventory(ctx, req.(*IncreaseInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cart_ServiceDesc is the grpc.ServiceDesc for Cart service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cart_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cart_rpc.Cart",
	HandlerType: (*CartServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCart",
			Handler:    _Cart_CreateCart_Handler,
		},
		{
			MethodName: "AddItem",
			Handler:    _Cart_AddItem_Handler,
		},
		{
			MethodName: "GetCartDetail",
			Handler:    _Cart_GetCartDetail_Handler,
		},
		{
			MethodName: "ReduceInventory",
			Handler:    _Cart_ReduceInventory_Handler,
		},
		{
			MethodName: "IncreaseInventory",
			Handler:    _Cart_IncreaseInventory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cart_rpc.proto",
}
