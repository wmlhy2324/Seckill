// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: order_rpc.proto

package order_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Order_CreateOrder_FullMethodName        = "/order_rpc.Order/CreateOrder"
	Order_UpdateOrderState_FullMethodName   = "/order_rpc.Order/UpdateOrderState"
	Order_GetOrderDetail_FullMethodName     = "/order_rpc.Order/GetOrderDetail"
	Order_CreateSeckillOrder_FullMethodName = "/order_rpc.Order/CreateSeckillOrder"
	Order_CreateRollback_FullMethodName     = "/order_rpc.Order/CreateRollback"
)

// OrderClient is the client API for Order service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	UpdateOrderState(ctx context.Context, in *UpdateOrderStateRequest, opts ...grpc.CallOption) (*UpdateOrderStateResponse, error)
	GetOrderDetail(ctx context.Context, in *GetOrderDetailRequest, opts ...grpc.CallOption) (*GetOrderDetailResponse, error)
	CreateSeckillOrder(ctx context.Context, in *CreateSeckillOrderRequest, opts ...grpc.CallOption) (*CreateSeckillOrderResponse, error)
	CreateRollback(ctx context.Context, in *CreateSeckillOrderRequest, opts ...grpc.CallOption) (*CreateSeckillOrderResponse, error)
}

type orderClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderClient(cc grpc.ClientConnInterface) OrderClient {
	return &orderClient{cc}
}

func (c *orderClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, Order_CreateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) UpdateOrderState(ctx context.Context, in *UpdateOrderStateRequest, opts ...grpc.CallOption) (*UpdateOrderStateResponse, error) {
	out := new(UpdateOrderStateResponse)
	err := c.cc.Invoke(ctx, Order_UpdateOrderState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetOrderDetail(ctx context.Context, in *GetOrderDetailRequest, opts ...grpc.CallOption) (*GetOrderDetailResponse, error) {
	out := new(GetOrderDetailResponse)
	err := c.cc.Invoke(ctx, Order_GetOrderDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) CreateSeckillOrder(ctx context.Context, in *CreateSeckillOrderRequest, opts ...grpc.CallOption) (*CreateSeckillOrderResponse, error) {
	out := new(CreateSeckillOrderResponse)
	err := c.cc.Invoke(ctx, Order_CreateSeckillOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) CreateRollback(ctx context.Context, in *CreateSeckillOrderRequest, opts ...grpc.CallOption) (*CreateSeckillOrderResponse, error) {
	out := new(CreateSeckillOrderResponse)
	err := c.cc.Invoke(ctx, Order_CreateRollback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServer is the server API for Order service.
// All implementations must embed UnimplementedOrderServer
// for forward compatibility
type OrderServer interface {
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	UpdateOrderState(context.Context, *UpdateOrderStateRequest) (*UpdateOrderStateResponse, error)
	GetOrderDetail(context.Context, *GetOrderDetailRequest) (*GetOrderDetailResponse, error)
	CreateSeckillOrder(context.Context, *CreateSeckillOrderRequest) (*CreateSeckillOrderResponse, error)
	CreateRollback(context.Context, *CreateSeckillOrderRequest) (*CreateSeckillOrderResponse, error)
	mustEmbedUnimplementedOrderServer()
}

// UnimplementedOrderServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServer struct {
}

func (UnimplementedOrderServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderServer) UpdateOrderState(context.Context, *UpdateOrderStateRequest) (*UpdateOrderStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderState not implemented")
}
func (UnimplementedOrderServer) GetOrderDetail(context.Context, *GetOrderDetailRequest) (*GetOrderDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderDetail not implemented")
}
func (UnimplementedOrderServer) CreateSeckillOrder(context.Context, *CreateSeckillOrderRequest) (*CreateSeckillOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeckillOrder not implemented")
}
func (UnimplementedOrderServer) CreateRollback(context.Context, *CreateSeckillOrderRequest) (*CreateSeckillOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRollback not implemented")
}
func (UnimplementedOrderServer) mustEmbedUnimplementedOrderServer() {}

// UnsafeOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServer will
// result in compilation errors.
type UnsafeOrderServer interface {
	mustEmbedUnimplementedOrderServer()
}

func RegisterOrderServer(s grpc.ServiceRegistrar, srv OrderServer) {
	s.RegisterService(&Order_ServiceDesc, srv)
}

func _Order_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_UpdateOrderState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).UpdateOrderState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_UpdateOrderState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).UpdateOrderState(ctx, req.(*UpdateOrderStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetOrderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetOrderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_GetOrderDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetOrderDetail(ctx, req.(*GetOrderDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_CreateSeckillOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeckillOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).CreateSeckillOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_CreateSeckillOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).CreateSeckillOrder(ctx, req.(*CreateSeckillOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_CreateRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeckillOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).CreateRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_CreateRollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).CreateRollback(ctx, req.(*CreateSeckillOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Order_ServiceDesc is the grpc.ServiceDesc for Order service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Order_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order_rpc.Order",
	HandlerType: (*OrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _Order_CreateOrder_Handler,
		},
		{
			MethodName: "UpdateOrderState",
			Handler:    _Order_UpdateOrderState_Handler,
		},
		{
			MethodName: "GetOrderDetail",
			Handler:    _Order_GetOrderDetail_Handler,
		},
		{
			MethodName: "CreateSeckillOrder",
			Handler:    _Order_CreateSeckillOrder_Handler,
		},
		{
			MethodName: "CreateRollback",
			Handler:    _Order_CreateRollback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_rpc.proto",
}
